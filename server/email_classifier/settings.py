"""
Django settings for email_classifier project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
import logging

# Configurar logger
logger = logging.getLogger(__name__)

# Carregar variáveis de ambiente
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# Para Railway, permitir todos os hosts Railway
ALLOWED_HOSTS = []
if 'RAILWAY_STATIC_URL' in os.environ:
    ALLOWED_HOSTS = ['*']  # Railway injeta hosts automaticamente
elif 'DATABASE_URL' in os.environ:
    # Estamos no Railway mesmo sem RAILWAY_STATIC_URL
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'classifier.apps.ClassifierConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Adicionar após SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'classifier.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

APPEND_SLASH = True
TRAILING_SLASH = True

ROOT_URLCONF = 'email_classifier.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'email_classifier.wsgi.application'

# Database configuration for Railway
# Verificar se estamos no Railway (produção) PRIMEIRO
print(f"[DEBUG] Verificando variáveis de ambiente:")
print(f"[DEBUG] DATABASE_URL presente: {'DATABASE_URL' in os.environ}")
print(f"[DEBUG] PGHOST presente: {'PGHOST' in os.environ}")
print(f"[DEBUG] RAILWAY_PRIVATE_DOMAIN presente: {'RAILWAY_PRIVATE_DOMAIN' in os.environ}")

# Verificar múltiplas formas de detectar o Railway
is_railway = any([
    'DATABASE_URL' in os.environ,
    'PGHOST' in os.environ,
    'RAILWAY_PRIVATE_DOMAIN' in os.environ,
    'RAILWAY_DEPLOYMENT_DRAINING_SECONDS' in os.environ
])

if is_railway:
    print(f"[INFO] Ambiente Railway detectado!")

    # Tentar usar DATABASE_URL primeiro
    if 'DATABASE_URL' in os.environ:
        # Removido o print da DATABASE_URL por segurança
        print(f"[INFO] Usando DATABASE_URL configurada")

        try:
            DATABASES = {
                'default': dj_database_url.parse(
                    os.environ.get('DATABASE_URL'),
                    conn_max_age=600,
                    conn_health_checks=True,
                )
            }

            # Configurações específicas para PostgreSQL no Railway
            DATABASES['default']['OPTIONS'] = {
                'sslmode': 'require',
                'connect_timeout': 30,
            }

            print(f"[INFO] PostgreSQL configurado via DATABASE_URL")
            print(f"[INFO] Host: {DATABASES['default'].get('HOST', 'N/A')}")
            print(f"[INFO] Port: {DATABASES['default'].get('PORT', 'N/A')}")
            print(f"[INFO] Database: {DATABASES['default'].get('NAME', 'N/A')}")

        except Exception as e:
            print(f"[ERROR] Erro ao processar DATABASE_URL: {e}")
            # Fallback para SQLite se DATABASE_URL estiver malformada
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }

    # Fallback para variáveis individuais do PostgreSQL
    elif all(key in os.environ for key in ['PGHOST', 'PGDATABASE', 'PGUSER', 'POSTGRES_PASSWORD']):
        print(f"[INFO] Usando variáveis individuais do PostgreSQL")

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.environ.get('PGDATABASE', 'railway'),
                'USER': os.environ.get('PGUSER', 'postgres'),
                'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
                'HOST': os.environ.get('PGHOST', ''),
                'PORT': os.environ.get('PGPORT', '5432'),
                'OPTIONS': {
                    'sslmode': 'require',
                },
            }
        }

        print(f"[INFO] PostgreSQL configurado: {DATABASES['default']['HOST']}:{DATABASES['default']['PORT']}")

    else:
        print("[ERROR] Railway detectado mas configurações de banco não encontradas!")
        # Fallback para SQLite em caso de erro
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    print("[INFO] Ambiente local detectado, usando SQLite")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

print(f"[INFO] Configuração final do banco: {DATABASES['default']['ENGINE']}")

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Configuração do Whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Configuração de upload de arquivos
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Configurações da API Cohere
COHERE_API_KEY = os.getenv('COHERE_API_KEY', '')

# Configuração da API do Hugging Face
HUGGINGFACE_API_TOKEN = os.environ.get("HUGGINGFACE_API_TOKEN", "")

CORS_ORIGIN_FRONT = os.getenv('CORS_ORIGIN_FRONT', 'http://localhost:3000')

# Configurações de CSRF
CSRF_TRUSTED_ORIGINS = [CORS_ORIGIN_FRONT, 'http://127.0.0.1:3000']
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [CORS_ORIGIN_FRONT, 'http://127.0.0.1:3000']

# Configurações de segurança para produção
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # Para Railway
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Configurações de logging para Railway
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'classifier': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

print(f"[INFO] Django iniciado. DEBUG={DEBUG}, ALLOWED_HOSTS={ALLOWED_HOSTS}")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
