#!/bin/bash

# Verificar vari√°veis do Railway PostgreSQL
echo "üîç Verificando configura√ß√µes do Railway PostgreSQL..."

if [ -n "$PGHOST" ] && [ -n "$PGDATABASE" ] && [ -n "$PGUSER" ] && [ -n "$POSTGRES_PASSWORD" ]; then
    echo "‚úÖ Vari√°veis PostgreSQL encontradas:"
    echo "   PGHOST: $PGHOST"
    echo "   PGDATABASE: $PGDATABASE"
    echo "   PGUSER: $PGUSER"
    echo "   PGPORT: ${PGPORT:-5432}"
elif [ -n "$DATABASE_URL" ]; then
    echo "‚úÖ DATABASE_URL encontrada: ${DATABASE_URL:0:50}..."
else
    echo "‚ùå Configura√ß√µes de banco de dados n√£o encontradas!"
    echo "Vari√°veis dispon√≠veis:"
    env | grep -E "(DATABASE|PG|POSTGRES)" | sort
    exit 1
fi

echo "üîó Conectando ao banco de dados PostgreSQL..."

# Aguardar um momento para conex√µes se estabilizarem
sleep 3

# Entrar no diret√≥rio server
cd server

# Verificar se os arquivos do Django existem
if [ ! -f "manage.py" ]; then
    echo "‚ùå manage.py n√£o encontrado no diret√≥rio server"
    exit 1
fi

# Mostrar informa√ß√µes de debug do Django
echo "üß™ Verificando configura√ß√µes do Django..."
python manage.py diffsettings | grep -i database || echo "N√£o foi poss√≠vel mostrar configura√ß√µes"

# Verificar conectividade b√°sica
echo "üß™ Testando conectividade b√°sica com banco..."
python manage.py check --database default || {
    echo "‚ùå Falha na verifica√ß√£o b√°sica do Django"
    echo "Tentando diagnosticar o problema..."
    python manage.py shell -c "
import os
print('DATABASE_URL:', os.environ.get('DATABASE_URL', 'N√ÉO DEFINIDA'))
print('PGHOST:', os.environ.get('PGHOST', 'N√ÉO DEFINIDA'))
print('PGDATABASE:', os.environ.get('PGDATABASE', 'N√ÉO DEFINIDA'))
from django.conf import settings
print('Engine configurado:', settings.DATABASES['default']['ENGINE'])
print('Host configurado:', settings.DATABASES['default'].get('HOST', 'N/A'))
"
    exit 1
}

echo "‚úÖ Verifica√ß√£o b√°sica OK"

# Executar migra√ß√µes com mais verbosidade
echo "üì¶ Aplicando migra√ß√µes..."
python manage.py migrate --verbosity=2 --noinput || {
    echo "‚ùå Falha ao aplicar migra√ß√µes"
    exit 1
}

echo "‚úÖ Migra√ß√µes aplicadas"

# Coletar arquivos est√°ticos
echo "üìÅ Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput || {
    echo "‚ö†Ô∏è Falha ao coletar arquivos est√°ticos, mas continuando..."
}

echo "‚úÖ Arquivos est√°ticos coletados"

# Verificar se gunicorn est√° dispon√≠vel
echo "üîç Verificando se gunicorn est√° dispon√≠vel..."
python -c "import gunicorn; print('‚úÖ Gunicorn encontrado')" || {
    echo "‚ùå Gunicorn n√£o encontrado"
    exit 1
}

# Iniciar servidor
echo "üöÄ Iniciando servidor Gunicorn..."
echo "üåê Servidor ser√° iniciado na porta: ${PORT:-8000}"

gunicorn email_classifier.wsgi:application \
    --bind 0.0.0.0:${PORT:-8000} \
    --workers 2 \
    --timeout 120 \
    --keep-alive 2 \
    --preload \
    --log-level info \
    --access-logfile - \
    --error-logfile -
